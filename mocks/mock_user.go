// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pradiptarana/url-shortener/repository (interfaces: URLRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/pradiptarana/url-shortener/model"
)

// MockURLRepository is a mock of URLRepository interface.
type MockURLRepository struct {
	ctrl     *gomock.Controller
	recorder *MockURLRepositoryMockRecorder
}

// MockURLRepositoryMockRecorder is the mock recorder for MockURLRepository.
type MockURLRepositoryMockRecorder struct {
	mock *MockURLRepository
}

// NewMockURLRepository creates a new mock instance.
func NewMockURLRepository(ctrl *gomock.Controller) *MockURLRepository {
	mock := &MockURLRepository{ctrl: ctrl}
	mock.recorder = &MockURLRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLRepository) EXPECT() *MockURLRepositoryMockRecorder {
	return m.recorder
}

// CreateURL mocks base method.
func (m *MockURLRepository) CreateURL(arg0 *model.URL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateURL", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateURL indicates an expected call of CreateURL.
func (mr *MockURLRepositoryMockRecorder) CreateURL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateURL", reflect.TypeOf((*MockURLRepository)(nil).CreateURL), arg0)
}

// GetMaxID mocks base method.
func (m *MockURLRepository) GetMaxID() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxID")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaxID indicates an expected call of GetMaxID.
func (mr *MockURLRepositoryMockRecorder) GetMaxID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxID", reflect.TypeOf((*MockURLRepository)(nil).GetMaxID))
}

// GetOriginalURL mocks base method.
func (m *MockURLRepository) GetOriginalURL(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOriginalURL", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOriginalURL indicates an expected call of GetOriginalURL.
func (mr *MockURLRepositoryMockRecorder) GetOriginalURL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOriginalURL", reflect.TypeOf((*MockURLRepository)(nil).GetOriginalURL), arg0)
}

// GetOriginalURLCache mocks base method.
func (m *MockURLRepository) GetOriginalURLCache(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOriginalURLCache", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetOriginalURLCache indicates an expected call of GetOriginalURLCache.
func (mr *MockURLRepositoryMockRecorder) GetOriginalURLCache(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOriginalURLCache", reflect.TypeOf((*MockURLRepository)(nil).GetOriginalURLCache), arg0)
}

// SetURLCache mocks base method.
func (m *MockURLRepository) SetURLCache(arg0 *model.URL) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetURLCache", arg0)
}

// SetURLCache indicates an expected call of SetURLCache.
func (mr *MockURLRepositoryMockRecorder) SetURLCache(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetURLCache", reflect.TypeOf((*MockURLRepository)(nil).SetURLCache), arg0)
}
